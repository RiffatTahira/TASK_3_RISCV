#Test cases for all instructions mentioned in SIF task report
# Test ADDI
00000093 # ADDI x1, x0, 0   ; x1 = 0
00100113 # ADDI x2, x0, 1    ; x2 = 1

# Test LUI
002002B7 # LUI x5, 2     ; x5 = 2 << 12

# Test AUIPC
00300317 # AUIPC x6, 3    ; x6 = PC + (3 << 12)

# Test ADD, SUB
002081B3 # ADD x3, x1, x2   ; x3 = x1 + x2 = 1
40320233 # SUB x4, x4, x3    ; x4 = x4 - x3 = -1

# Test XOR, OR, AND
003282B3 # XOR x5, x5, x3    ; x5 = x5 ^ x3
00430333 # OR x6, x6, x4      ;  x6 = x6 | x4
005383B3 # AND x7, x7, x5    ; x7 = x7 & x5

# Test SLL, SRL, SRA
00640433 # SLL x8, x8, x6    ; x8 = x8 << x6
007485B3 # SRL x11, x10, x7    ; x11 = x10 >> x7
40850633 # SRA x12, x11, x8    ; x12 = x11 >>> x8

# Test SLT, SLTU
009586B3 # SLT x13, x11, x9  ; x13 = x11 < x9
00A60733 # SLTU x14, x12, x10 ; x14 = x12 < x10

# Test BEQ, BNE
00B70863 # BEQ x14, x11, 8   ; if (x14 == x11) PC += 8
00C808E3 # BNE x16, x15, 8    ; if (x15 != x12) PC += 8

# Test BLT, BGE
00D88963 # BLT x17, x16, 8   ; if (x16 < x13) PC += 8
00E90A63 # BGE x18, x17, 8    ; if (x17 >= x14) PC += 8

# Test BLTU, BGEU
00F98AE3 # BLTU x19, x18, 8  ; if (x18 < x15) PC += 8
010A0B63 # BGEU x20, x19, 8   ; if (x19 >= x16) PC += 8

# Test JAL
011A0C63 # JAL x21, 8        ; PC += 8 and x21 = PC + 4

# Test JALR
012B0C67 # JALR x22, x21, 8  ; PC = x21 + 8 and x22 = PC + 4

# Test LOAD
013B8067 # LW x23, 0(x22)    ; x23 = Mem[x22]

# Test STORE
014C0067 # SW x24, 0(x23)    ; Mem[x23] = x24

# Test ECALL
00000073 # ECALL

# Test EBREAK
00100073 # EBREAK

# GCD of 48 and 18 (example numbers)

# Initialize registers
03000093 # ADDI x1, x0, 48    ; x1 = 48
01200113 # ADDI x2, x0, 18    ; x2 = 18

# GCD Calculation
0020A133 # LOOP: SUB x4, x1, x2  ; x4 = x1 - x2
0020A933 # BGE x5, x1, x2, END   ; if (x1 >= x2) jump to END
40318133 # SUB x3, x3, x2        ; x1 = x1 - x2
00008067 # JAL x0, LOOP          ; jump to LOOP

# End of GCD
00008513 # END: ADD x10, x0, x2  ; x10 = x2 (result)


# Fibonacci upto F(10)

# Initialize registers
00000093 # ADDI x1, x0, 0    ; x1 = 0 (F0)
00100113 # ADDI x2, x0, 1    ; x2 = 1 (F1)
00A00293 # ADDI x5, x0, 10   ; x5 = 10 (number of terms)
00200313 # ADDI x6, x0, 2    ; x6 = 2 (counter)

# Fibonacci Calculation
002082B3 # NEXT: ADD x5, x1, x2  ; Fn = F(n-1) + F(n-2)
00200313 # ADDI x6, x6, 1        ; counter++
00100433 # ADD x8, x0, x2        ; x8 = x2 (temp)
002084B3 # ADD x9, x0, x1        ; x9 = x1 (temp)
00030433 # ADD x8, x0, x6        ; x8 = counter
00100833 # ADD x16, x1, x8       ; x16 = Fn
00000067 # JAL x0, NEXT          ; jump to NEXT

# End of Fibonacci
00000013 # END: NOP              ; done

